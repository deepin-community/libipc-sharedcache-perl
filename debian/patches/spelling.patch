Description: fix a few typos in POD
Author: Florian Schlichting <fsfs@debian.org>
Forwarded: https://rt.cpan.org/Ticket/Display.html?id=125731

--- a/SharedCache.pm
+++ b/SharedCache.pm
@@ -25,13 +25,13 @@
 This module provides a shared memory cache accessed as a tied hash.
 
 Shared memory is an area of memory that is available to all processes.
-It is accessed by choosing a key, the ipc_key arguement to tie.  Every
+It is accessed by choosing a key, the ipc_key argument to tie.  Every
 process that accesses shared memory with the same key gets access to
 the same region of memory.  In some ways it resembles a file system,
 but it is not hierarchical and it is resident in memory.  This makes
 it harder to use than a filesystem but much faster.  The data in
 shared memory persists until the machine is rebooted or it is
-explicitely deleted.
+explicitly deleted.
 
 This module attempts to make shared memory easy to use for one
 specific application - a shared memory cache.  For other uses of
@@ -41,7 +41,7 @@
 A cache is a place where processes can store the results of their
 computations for use at a later time, possibly by other instances of
 the application.  A good example of the use of a cache is a web
-server.  When a web server receieves a request for an html page it
+server.  When a web server receives a request for an html page it
 goes to the file system to read it.  This is pretty slow, so the web
 server will probably save the file in memory and use the in memory
 copy the next time a request for that file comes in, as long as the
@@ -62,8 +62,8 @@
 L<HTML::Template>).  HTML::Template has the ability to maintain a
 cache of parsed template structures when running in a persistent
 environment like Apache/mod_perl.  Since parsing a template from disk
-takes a fair ammount of time this can provide a big performance gain.
-Unfortunately it can also consume large ammounts of memory since each
+takes a fair amount of time this can provide a big performance gain.
+Unfortunately it can also consume large amounts of memory since each
 web server maintains its own cache in its own memory space.
 
 By using IPC::ShareLite and Storable (L<IPC::ShareLite> and
@@ -81,7 +81,7 @@
 cached data for vailidty - if the test fails the data will be
 reloaded.  This is useful for defining a max-age for cached data or
 keeping cached data in sync with other resources.  In the web server
-example above the validation test would look to see wether the file
+example above the validation test would look to see whether the file
 had changed on disk.
 
 To initialize this module you provide two callback subroutines.  The
@@ -184,11 +184,11 @@
 all you'll need to do is to fetch values from the cache and possible
 delete keys.  Just in case you were wondering, exists() doesn't
 trigger a cache load - it returns 1 if the given key is already in the
-cache and 0 if it isn't.  Similarily, keys() and each() operate on
+cache and 0 if it isn't.  Similarly, keys() and each() operate on
 key/value pairs already loaded into the cache.
 
 The most important thing to realize is that there is no need to
-explicitely store into the cache since the load_callback is called
+explicitly store into the cache since the load_callback is called
 automatically when it is necessary to load new data.  If you find
 yourself using more than just "C<$data = $cache{'key'};>" you need to
 make sure you really know what you're doing!
@@ -237,11 +237,11 @@
 If the validate_callback returns false then the object is discarded
 and the load_callback is called.
 
-The load_callback recieves a single parameter - the requested key.  It
+The load_callback receives a single parameter - the requested key.  It
 must return a reference to the data object be stored in the cache.
 Returning something that is not a reference results in an error.
 
-The validate_callback recieves two parameters - the key and the
+The validate_callback receives two parameters - the key and the
 reference to the stored object.  It must return true or false.
 
 There are two ways to specify the callbacks.  The first is simply to
@@ -289,13 +289,13 @@
 =head2 max_size (optional)
 
 By setting this parameter you are setting a logical maximum to the
-ammount of data stored in the cache.  When an item is stored in the
-cache and this limit is exceded the oldest item (or items, as
+amount of data stored in the cache.  When an item is stored in the
+cache and this limit is exceeded the oldest item (or items, as
 necessary) in the cache will be deleted to make room.  This value is
 specified in bytes.  It defaults to 0, which specifies no limit on the
 size of the cache.  
 
-Turning this feature on costs a fair ammount of performance - how much
+Turning this feature on costs a fair amount of performance - how much
 depends largely on home much data is being stored into the cache
 versus the size of max_cache.  In the worst case (where the max_size
 is set much too low) this option can cause severe "thrashing" and
